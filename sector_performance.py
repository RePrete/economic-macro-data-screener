# -*- coding: utf-8 -*-
"""Sector performance.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GrIlxQ7EdhwMUlpLqVpn5I90HvEsITCX
"""

pip install yfinance

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt

symbols = {
    "XLF": "Financial", 
    "XLI": "Industrial", 
    "XLE": "Energy", 
    "XLB": "Materials", 
    "XLK": "Technology", 
    "XLY": "Consumer discretionary", 
    "XLV": "Healthcare", 
    "XLP": "Consumer staples", 
    "XLU": "Utilities", 
    "XLRE": "Real estate", 
    "XLC": "Communication services", 
}
benchmark = "SPY"
timeframes = ["1d", "7d", "1mo", "3mo"]

symbols = {
    "IYF": "Financial", 
    "VIS": "Industrial", 
    "VDE": "Energy", 
    "VAW": "Materials", 
    "IGV": "Technology", 
    "IYC": "Consumer discretionary", 
    "VHT": "Healthcare", 
    "VDC": "Consumer staples", 
    "VPU": "Utilities", 
    "VNQ": "Real estate", 
    "XTL": "Telecom", 
}
benchmark = "SPY"
timeframes = ["1d", "7d", "1mo", "3mo"]

def calculate_percentage_change(open, close):
  return (close - open) / open * 100

def get_symbol_percentage_change(data, symbol, timeframe):
  ticker = data.tickers[symbol]
  history = ticker.history(period="3mo", interval="1d")
  history['Open'] = history['Close'].shift(1)
  if (timeframe == "1d"):
    open = history.tail(2).iloc[-1]['Open']
    close = history.tail(2).iloc[-1]['Close']
  elif (timeframe == "7d"):
    open = history.tail(7).iloc[0]['Open']
    close = history.iloc[-1]['Close']
  elif (timeframe == "1mo"):
    open = history.tail(30).iloc[0]['Open']
    close = history.iloc[-1]['Close']
  elif (timeframe == "3mo"):
    open = history.iloc[1]['Open']
    close = history.iloc[-1]['Close']
  
  return calculate_percentage_change(open, close)

data = yf.Tickers(list(symbols.keys()))

df = pd.DataFrame(columns=timeframes + ["ticker"])
for symbol in data.tickers:
  ticker_changes = {'ticker': symbols[symbol]}
  for timeframe in timeframes:
    ticker_changes[timeframe] = get_symbol_percentage_change(data, symbol, timeframe)
  df = df.append(ticker_changes, ignore_index=True)

def compare_with_benchmark(data, benchmark):
  data['1d'] = data['1d']/data.loc[benchmark]['1d']
  data['7d'] = data['7d']/data.loc[benchmark]['7d']
  data['1mo'] = data['1mo']/data.loc[benchmark]['1mo']
  data['3mo'] = data['3mo']/data.loc[benchmark]['3mo']

import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go

fig = make_subplots(rows=2, cols=2, subplot_titles=['1d', '7d', '1m', '3m'])
df1d = df[['ticker', '1d']].sort_values('1d')
df7d = df[['ticker', '7d']].sort_values('7d')
df1mo = df[['ticker', '1mo']].sort_values('1mo')
df3mo = df[['ticker', '3mo']].sort_values('3mo')

fig.append_trace(
   go.Bar(name='1d', x=df1d['1d'], y=df1d['ticker'], orientation='h', marker=dict(color=df1d['1d'], colorscale=['#c62828', '#fffde7', '#558b2f'])), 
   row=1, col=1
)
fig.append_trace(
   go.Bar(name='7d', x=df7d['7d'], y=df7d['ticker'], orientation='h', marker=dict(color=df7d['7d'], colorscale=['#c62828', '#fffde7', '#558b2f'])), 
   row=1, col=2
)
fig.append_trace(
   go.Bar(name='1mo', x=df1mo['1mo'], y=df1mo['ticker'], orientation='h', marker=dict(color=df1mo['1mo'], colorscale=['#c62828', '#fffde7', '#558b2f'])), 
   row=2, col=1
)
fig.append_trace(
   go.Bar(name='3mo', x=df3mo['3mo'], y=df3mo['ticker'], orientation='h', marker=dict(color=df3mo['3mo'], colorscale=['#c62828', '#fffde7', '#558b2f'])), 
   row=2, col=2
)
# Change the bar mode
fig.update_layout(barmode='group', width=1800, height=1000)
fig.update(layout_showlegend=False)
fig.show()